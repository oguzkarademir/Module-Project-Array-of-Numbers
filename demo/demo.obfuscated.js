const a = ['---\x20loading:\x20reset', 'average:\x20', '---\x20loading:\x20add\x20number', 'average:', 'numbers:', 'second\x20parameter\x20must\x20be\x20a\x20number', '\x0a---\x20calling:\x20add\x20number\x20handler', 'length', 'numbers\x20(after):', '\x0a---\x20calling:\x20remove\x20number\x20handler', 'first\x20parameter\x20must\x20be\x20an\x20array', 'every', 'arrayToDisplay:', 'userInput:', 'message:', '\x0a---\x20calling:\x20find\x20average\x20handler', 'find\x20all\x20entries\x20less\x20than:', 'first\x20parameter\x20must\x20contain\x20only\x20numbers', '\x20is\x20not\x20a\x20valid\x20number', 'isArray', 'parameter\x20must\x20contain\x20only\x20numbers', 'number', 'log', '\x0a---\x20calling:\x20display\x20array\x20handler', 'stringToDisplay:', 'numbers\x20(before):', 'all\x20saved\x20numbers', '---\x20loading:\x20find\x20less\x20than', 'find\x20all\x20entries\x20greater\x20than:', 'enter\x20a\x20number\x20to\x20add:', 'isNaN', 'numbers\x20less\x20than\x20', 'userNumber:', '---\x20loading:\x20remove\x20number', '---\x20loading:\x20find\x20average', '---\x20loading:\x20find\x20greater\x20than', 'filteredNumbers:', 'successfully\x20removed\x20', '\x0a---\x20calling:\x20reset\x20handler', 'numbers\x20greater\x20than\x20', 'push', 'parameter\x20must\x20be\x20an\x20array']; (function (b, e) { const f = function (g) { while (--g) { b['push'](b['shift']()); } }; f(++e); }(a, 0x13b)); const b = function (c, d) { c = c - 0x0; let e = a[c]; return e; }; 'use strict'; let numbers = []; console[b('0x1')](b('0x17')); const addNumberHandler = () => { console[b('0x1')](b('0x1b')); const c = prompt(b('0x8')); console[b('0x1')](b('0x22'), typeof c, '\x0a', c); if (c === null || c === '') { return; } const d = Number(c); console[b('0x1')]('userNumber:', typeof d, '\x0a', d); if (Number['isNaN'](d)) { alert(c + b('0x27')); return; } console['log'](b('0x4'), typeof numbers, '\x0a', numbers); numbers[b('0x13')](d); console[b('0x1')](b('0x1d'), typeof numbers, '\x0a', numbers); displayArrayHandler(); }; const reduceForAlert = c => { if (!Array['isArray'](c)) { throw new TypeError('parameter\x20must\x20be\x20an\x20array'); } if (!c['every'](e => typeof e === 'number')) { throw new TypeError(b('0x29')); } let d = ''; for (let e of c) { d += e + '\x0a'; } return d; }; const displayArrayHandler = (c = numbers, d = b('0x5')) => { console[b('0x1')](b('0x2')); console[b('0x1')](b('0x21'), typeof c, '\x0a', c); console['log'](b('0x23'), typeof d, '\x0a', d); const e = reduceForAlert(c); console['log'](b('0x3'), typeof e, '\x0a', e); alert(d + ':\x0a' + e); }; console[b('0x1')](b('0xd')); const reduceToAverage = c => { if (!Array[b('0x28')](c)) { throw new TypeError(b('0x14')); } if (!c[b('0x20')](f => typeof f === b('0x0'))) { throw new TypeError(b('0x29')); } if (c[b('0x1c')] === 0x0) { return 0x0; } let d = 0x0; for (let f of c) { d += f; } const e = d / c[b('0x1c')]; return e; }; const findAverageHandler = () => { console[b('0x1')](b('0x24')); console[b('0x1')]('numbers:', typeof numbers, '\x0a', numbers); const c = reduceToAverage(numbers); console[b('0x1')](b('0x18'), typeof c, '\x0a', c); alert(b('0x16') + c); }; console[b('0x1')](b('0xe')); const findGreaterThan = (c, d) => { if (!Array[b('0x28')](c)) { throw new TypeError('first\x20parameter\x20must\x20be\x20an\x20array'); } if (!c[b('0x20')](f => typeof f === 'number')) { throw new TypeError('first\x20parameter\x20must\x20contain\x20only\x20numbers'); } if (typeof d !== b('0x0')) { throw new TypeError(b('0x1a')); } const e = []; for (let f of c) { if (f > d) { e[b('0x13')](f); } } return e; }; const findGreaterThanHandler = () => { console[b('0x1')]('\x0a---\x20calling:\x20find\x20greater\x20than\x20handler'); console[b('0x1')](b('0x19'), typeof numbers, '\x0a', numbers); const c = prompt(b('0x7')); console[b('0x1')](b('0x22'), typeof c, '\x0a', c); if (c === null || c === '') { return; } const d = Number(c); console[b('0x1')]('userNumber:', typeof d, '\x0a', d); if (Number['isNaN'](d)) { alert(c + b('0x27')); return; } const e = findGreaterThan(numbers, d); console[b('0x1')]('filteredNumbers:', typeof e, '\x0a', e); displayArrayHandler(e, b('0x12') + d); }; console[b('0x1')](b('0x6')); const findLessThan = (c, d) => { if (!Array['isArray'](c)) { throw new TypeError('first\x20parameter\x20must\x20be\x20an\x20array'); } if (!c['every'](f => typeof f === b('0x0'))) { throw new TypeError(b('0x26')); } if (typeof d !== b('0x0')) { throw new TypeError(b('0x1a')); } const e = []; for (let f of c) { if (f < d) { e[b('0x13')](f); } } return e; }; const findLessThanHandler = () => { console[b('0x1')]('\x0a---\x20calling:\x20find\x20less\x20than\x20handler'); console[b('0x1')]('numbers:', typeof numbers, '\x0a', numbers); const c = prompt(b('0x25')); console[b('0x1')]('userInput:', typeof c, '\x0a', c); if (c === null || c === '') { return; } const d = Number(c); console[b('0x1')](b('0xb'), typeof d, '\x0a', d); if (Number[b('0x9')](d)) { alert(c + b('0x27')); return; } const e = findLessThan(numbers, d); console[b('0x1')](b('0xf'), typeof e, '\x0a', e); displayArrayHandler(e, b('0xa') + d); }; console[b('0x1')](b('0xc')); const removeNumber = (c, d) => { if (!Array[b('0x28')](c)) { throw new TypeError(b('0x1f')); } if (!c[b('0x20')](f => typeof f === b('0x0'))) { throw new TypeError(b('0x26')); } if (typeof d !== b('0x0')) { throw new TypeError(b('0x1a')); } const e = []; for (let f of c) { if (f !== d) { e[b('0x13')](f); } } return e; }; const removeNumberHandler = () => { console['log'](b('0x1e')); console['log']('numbers\x20(before):', typeof numbers, '\x0a', numbers); const c = prompt('find\x20all\x20entries\x20less\x20than:'); console[b('0x1')](b('0x22'), typeof c, '\x0a', c); if (c === null || c === '') { return; } const d = Number(c); console[b('0x1')]('userNumber:', typeof d, '\x0a', d); if (Number['isNaN'](d)) { alert(c + b('0x27')); return; } numbers = removeNumber(numbers, d); console[b('0x1')](b('0x1d'), typeof numbers, '\x0a', numbers); displayArrayHandler(numbers, b('0x10') + d); }; console[b('0x1')](b('0x15')); const resetHandler = () => { console[b('0x1')](b('0x11')); console[b('0x1')](b('0x4'), typeof numbers, '\x0a', numbers); numbers = []; console[b('0x1')](b('0x1d'), typeof numbers, '\x0a', numbers); displayArrayHandler(); };
